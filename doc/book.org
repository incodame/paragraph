* Software Configuration Management with Prolog
** Subtitle: a cookbook for solving real life scenarios
** Introduction - Reflective systems and devops

The impact of using wrongly(1) configured software products nowadays cannot be underestimated.

Software artifacts rely heavily on some -usually scattered- collection of parameters to define (refine) the
 aspects, variations and boundaries of their execution realm:
 - resources they use
 - strategies they adopt
 - logs they produce etc

Furthermore such parameters are interdependent and conceptually form a logical network which is to be
 well understood by humans (cognition), and which is most of the time specific to each project or system.

From a 30-year experience working on IT projects I can testify that we software engineers oftentimes
lack the very tools helping us evaluate the impact made by software configuration changes (what-if scenario) 
before we run them. Our software artifacts simply lack this "reflective"(2) capability.

This situation is normally mitigated by devops by using continuous integration, however the number of possible
combinations that can be covered under test by organizations remains usually limited. 

Correct software configuration cannot usually be captured, although this is in the present days adressed by 
container technology such as docker.

No matter what mitigation measures are taken, we run the risk to run an incorrect system as we deploy the 
software products into production environments, due to slight variations on the target system properties.

This book attempts to give solutions to practitioners such as software developers and devops engineers:
 - for building systems which can be easily reasoned about and compared
 - for integration of such reflective capabilities into bigger frameworks
and advocates the use of logical programming (using Prolog) for this purpose.

*** notes
 (1) either incorrect, overly complex or obfuscated
 (2) the capability to reason about oneself
 
** Driving directions in the development of "paragraph"

Paragraph is a prolog software component that aims at capturing the structure of the logical network made
up from software configuration parameters. Once this configuration is defined, an analysis on a deployed
system of software products can be conducted, be it on a development machine or a deployed environment.

The main aspects of this tool is:
- its availability as a module that can be extended using prolog itself or python (via pengines)
- its simple configuration which resides into a unique paragraph.yml file
- its choice of using commands or REPL, in order to ease its integration into any bigger devops framework

Sections of this book will work as a driver for the development of further features of this toolkit.

** Describing application parameters and how to access them

Application parameters can be described in the *paragraph.yml* file.
Examples below represent small sections inside it, and not the entire file.

The configuration of software products is usually performed inside files which may or may not reside into
software packages. Paragraph refers to either files or archives (zip or jar files) as "containers".

Top level containers for an application can be described as follows:

#+begin_src yaml
  deployment:
    paragraph:
      paragraph-ui:
        files:
          - help_md: file
          - pom_xml: file
        archives:
          - paragraph-ui(-version).war: archive
#+end_src

In that example paragraph-ui is an application, which is packaged as a web archive (extension .war).

That application in development has also the following top level containers: help_md and pom_xml.

These are references to the "file" section of paragraph.yml: 

#+begin_src yaml
  graph:
    file:
      help_md:
        loc: applfile("HELP.md")
        doc: "Help resources"
        params:
          - help_url: param
#+end_src

Finally help_md contains this parameter: help_url, which is a reference to the "param" section of
paragraph.yml:

#+begin_src yaml
  param:
    help_url:
        loc: regexp("[(](?<V1L>.*)[)]$")
        doc: "help resource url"
#+end_src

The help_url parameter defines a loc property using this prolog term: regexp(<regular expression>).

"loc" terms give a method to "compute" the value of the declared object:
  - for a "param", how to extract its value as text 
  - for a "file", how to locate it, given some additional constraints which we will discuss below

The navigation path for help_url is as follows:

#+begin_src prolog
?- navigate_graph_up(help_url, App, Path).
App = 'paragraph-ui',
Path = [regexp("[(](?<V1L>.*)[)]$"), applfile("HELP.md")].
#+end_src

and its value can be extracted as follows:

#+begin_src prolog
?- Opts = [ag('paragraph'), ve(''), ad(paragraph_ui)].
Opts = [ag(paragraph), ve(''), ad(paragraph_ui)].

?- paramv(help_url, Val, $Opts, _).
Trying app directory = /opt/paragraph/ParagraphUI
Val = "https://maven.apache.org/guides/index.html"
#+end_src

The explanation for the $Opts is done in the next section.

** Contraining the search for parameters - an overview

Application containers are not given a fix location (e.g. directory path or url) when declared in
*paragraph.yaml*.

To extract values of parameters Paragraph needs to have some "scope" constraining how a search is to
be performed: 
 - for which application group or application
 - or for which application version ('' means no version)
 - or under which root directory or url, using some application directory/url aliases
 etc...

This scope will determine which application archives or files will get scanned for value extraction.

** Internal programming model based on graph search and predicate chaining
As discussed above, paragraph resolves all possible navigation paths (bottom-up) from a parameter to an 
application, as in the following examples:

#+begin_src prolog
?- navigate_graph_up(json_ktext, 'paragraph-ui', L).
L = [jsonget('d/_/t'), endswith(".json"), warfile('paragraph-ui(-version).war')].

?- navigate_graph_up(pom_xml_version, 'paragraph-ui', L).
L = [xpath(//project/version(text)), endswith("/pom.xml"), warfile('paragraph-ui(-version).war')] ;
L = [xpath(//project/version(text)), applfile("pom.xml")].
#+end_src

define the respective paths:

#+begin_src text
json_ktext      --jsonget()--> json_config --endswith()--> <app archive> --warfile()--> paragraph-ui

pom_xml_version --xpath()-->   pom_xml     --endswith()--> <app archive> --warfile()--> paragraph-ui
pom_xml_version --xpath()-->   pom_xml     --applfile()-------------------------------> paragraph-ui
#+end_src

Given the high number of possible navigation paths and "loc" terms (xpath(), regexp(), jsonget() etc)
Paragraph takes the choice of implementing single graph transition predicates once,
and to use a "fold"(1) as generic mechanism to chain all applicable transitions from application to parameter
(the parameter value extraction is performed top-down) 

*** notes
(1) a technique from functional programming

* Building a complex graph model using pavements and tags
** The pavements project
This project aims at defining paragraph.yml as the composition of individual graph parts called "pavements".

Each pavement can typically describe the configuration of a single application or system.
In order to avoid duplication of definitions, a pavement itself can inherit container and parameter definitions
from templates via a set of tag, e.g.

    - Tag build=maven
    - Tag framework=springboot
      
which considerably simplifies its yaml source. These tag reference templates from the pavements library.
Template pavements from the pavements library can themselves use tags to inherit content from other templates.

The composed graph can then be described either via a DSL in a pavements.yml file, or via a set of builder
  commands.
Confer the pavements project for more details.

* Practical examples of searches for application parameters
** Examples of configuration parameters' searches
*** Example 1 - Searching for json file properties inside archives

*** Example 2 - Comparing xml file properties from application archives

** archive analysis for java
*** Example 3 - Comparing jar or class files between application versions
** log file analysis for java
*** Example 4 - Searching for specific text occurrences in application logs
** source analysis for java
*** Example 5 - Searching for specific patterns in application code
* Diff revisited
** reference to the extensible Xml diff article
** diff DSL based on paramv
* Examples of "bridging" searches
** Scopers to the rescue
*** Example 6 - Chaining parameter evaluations with scopers
* Examples of workflows - coordinating search tasks
** Database containers
** Operating system containers
** Web containers
** Security of systems
** The coworkers module - resumable workflow system

